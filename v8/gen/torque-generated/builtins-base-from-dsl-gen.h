#ifndef V8_TORQUE_BASE_FROM_DSL_BASE_H__
#define V8_TORQUE_BASE_FROM_DSL_BASE_H__

#include "src/compiler/code-assembler.h"
#include "src/utils.h"
#include "torque-generated/class-definitions-from-dsl.h"

namespace v8 {
namespace internal {

class BaseBuiltinsFromDSLAssembler {
 public:
  explicit BaseBuiltinsFromDSLAssembler(compiler::CodeAssemblerState* state) : state_(state), ca_(state) { USE(state_, ca_); }
  compiler::TNode<JSObject> NewJSObject(compiler::TNode<Map> p_map, compiler::TNode<Object> p_properties, compiler::TNode<FixedArrayBase> p_elements);
  compiler::TNode<JSObject> NewJSObject(compiler::TNode<Context> p_context);
  compiler::TNode<JSArray> NewJSArray(compiler::TNode<Context> p_context, compiler::TNode<Map> p_map, compiler::TNode<FixedArrayBase> p_elements);
  compiler::TNode<JSArray> NewJSArray(compiler::TNode<Context> p_context);
  compiler::TNode<Oddball> Hole();
  compiler::TNode<Oddball> Null();
  compiler::TNode<Oddball> Undefined();
  compiler::TNode<Oddball> True();
  compiler::TNode<Oddball> False();
  compiler::TNode<String> kEmptyString();
  compiler::TNode<String> kLengthString();
  compiler::TNode<BoolT> ElementsKindNotEqual(compiler::TNode<Int32T> p_k1, compiler::TNode<Int32T> p_k2);
  compiler::TNode<BoolT> IsNumberEqual(compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
  compiler::TNode<BoolT> IsNumberNotEqual(compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
  compiler::TNode<Number> Min(compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
  compiler::TNode<Number> Max(compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
  compiler::TNode<Smi> Cast5ATSmi(compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Smi> Cast13ATPositiveSmi(compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Number> Cast22UT12ATHeapNumber5ATSmi(compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<HeapObject> Cast10HeapObject(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<FixedArray> Cast10FixedArray(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<FixedDoubleArray> Cast16FixedDoubleArray(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<SloppyArgumentsElements> Cast23SloppyArgumentsElements(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSDataView> Cast12ATJSDataView(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSTypedArray> Cast12JSTypedArray(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSTypedArray> Cast12JSTypedArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSReceiver> Cast39UT15JSBoundFunction10JSFunction7JSProxy(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<HeapObject> Cast52UT11ATUndefined15JSBoundFunction10JSFunction7JSProxy(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast7JSArray(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Context> Cast9ATContext(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSObject> Cast8JSObject(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<NumberDictionary> Cast18ATNumberDictionary(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<FixedTypedArrayBase> Cast19FixedTypedArrayBase(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<String> Cast8ATString(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<String> Cast14ATDirectString(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSReceiver> Cast13ATConstructor(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<HeapNumber> Cast12ATHeapNumber(compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Map> Cast5ATMap(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast13ATFastJSArray(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSReceiver> Cast10JSReceiver(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSFunction> Cast10JSFunction(compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Smi> TryUintPtrToPositiveSmi(compiler::TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow);
  compiler::TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32(int32_t p_i);
  compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32(int32_t p_i);
  compiler::TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr(intptr_t p_i);
  compiler::TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr(uintptr_t p_i);
  compiler::TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<String> FromConstexpr8ATString18ATconstexpr_string(const char* p_s);
  compiler::TNode<Number> FromConstexpr22UT12ATHeapNumber5ATSmi18ATconstexpr_uint32(uint32_t p_i);
  compiler::TNode<Number> FromConstexpr22UT12ATHeapNumber5ATSmi17ATconstexpr_int32(int32_t p_i);
  compiler::TNode<Number> FromConstexpr22UT12ATHeapNumber5ATSmi19ATconstexpr_float64(double p_f);
  compiler::TNode<Number> FromConstexpr22UT12ATHeapNumber5ATSmi17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Number> FromConstexpr22UT12ATHeapNumber5ATSmi15ATconstexpr_Smi(Smi p_s);
  compiler::TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi(Smi p_s);
  compiler::TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31(int31_t p_i);
  compiler::TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31(int31_t p_i);
  compiler::TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64(double p_i);
  compiler::TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool(bool p_b);
  compiler::TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode(LanguageMode p_m);
  compiler::TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind(ElementsKind p_e);
  compiler::TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string(const char* p_s);
  compiler::TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot(int32_t p_c);
  compiler::TNode<Int32T> Convert7ATint3214ATElementsKind(compiler::TNode<Int32T> p_elementsKind);
  compiler::TNode<Number> Convert22UT12ATHeapNumber5ATSmi7ATint32(compiler::TNode<Int32T> p_i);
  compiler::TNode<IntPtrT> Convert8ATintptr7ATint32(compiler::TNode<Int32T> p_i);
  compiler::TNode<Smi> Convert5ATSmi7ATint32(compiler::TNode<Int32T> p_i);
  compiler::TNode<Number> Convert22UT12ATHeapNumber5ATSmi8ATuint32(compiler::TNode<Uint32T> p_ui);
  compiler::TNode<Smi> Convert5ATSmi8ATuint32(compiler::TNode<Uint32T> p_ui);
  compiler::TNode<UintPtrT> Convert9ATuintptr8ATuint32(compiler::TNode<Uint32T> p_ui);
  compiler::TNode<Int32T> Convert7ATint327ATuint8(compiler::TNode<Uint32T> p_i);
  compiler::TNode<Int32T> Convert7ATint328ATuint16(compiler::TNode<Uint32T> p_i);
  compiler::TNode<Int32T> Convert7ATint328ATuint31(compiler::TNode<Uint32T> p_i);
  compiler::TNode<Int32T> Convert7ATint328ATintptr(compiler::TNode<IntPtrT> p_i);
  compiler::TNode<Smi> Convert5ATSmi8ATintptr(compiler::TNode<IntPtrT> p_i);
  compiler::TNode<Uint32T> Convert8ATuint329ATuintptr(compiler::TNode<UintPtrT> p_ui);
  compiler::TNode<IntPtrT> Convert8ATintptr5ATSmi(compiler::TNode<Smi> p_s);
  compiler::TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi(compiler::TNode<Smi> p_ps);
  compiler::TNode<IntPtrT> Convert8ATintptr9ATuintptr(compiler::TNode<UintPtrT> p_ui);
  compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr(compiler::TNode<IntPtrT> p_i);
  compiler::TNode<Int32T> Convert7ATint325ATSmi(compiler::TNode<Smi> p_s);
  compiler::TNode<Float64T> Convert9ATfloat6412ATHeapNumber(compiler::TNode<HeapNumber> p_h);
  compiler::TNode<Float64T> Convert9ATfloat6422UT12ATHeapNumber5ATSmi(compiler::TNode<Number> p_n);
  compiler::TNode<UintPtrT> Convert9ATuintptr22UT12ATHeapNumber5ATSmi(compiler::TNode<Number> p_n);
  compiler::TNode<Float64T> Convert9ATfloat649ATfloat32(compiler::TNode<Float32T> p_f);
  compiler::TNode<Number> Convert22UT12ATHeapNumber5ATSmi9ATfloat64(compiler::TNode<Float64T> p_d);
  compiler::TNode<Float64T> Convert9ATfloat649ATuintptr(compiler::TNode<UintPtrT> p_ui);
  compiler::TNode<Number> Convert22UT12ATHeapNumber5ATSmi9ATuintptr(compiler::TNode<UintPtrT> p_ui);
  compiler::TNode<UintPtrT> Convert9ATuintptr9ATfloat64(compiler::TNode<Float64T> p_d);
  compiler::TNode<UintPtrT> Convert9ATuintptr8ATintptr(compiler::TNode<IntPtrT> p_i);
  compiler::TNode<UintPtrT> Convert9ATuintptr8ATRawPtr(compiler::TNode<RawPtrT> p_r);
  compiler::TNode<IntPtrT> Convert8ATintptr8ATRawPtr(compiler::TNode<RawPtrT> p_r);
  compiler::TNode<BInt> Convert6ATbint7ATint32(compiler::TNode<Int32T> p_v);
  compiler::TNode<BInt> Convert6ATbint8ATintptr(compiler::TNode<IntPtrT> p_v);
  compiler::TNode<BInt> Convert6ATbint5ATSmi(compiler::TNode<Smi> p_v);
  compiler::TNode<Object> UnsafeCast20UT5ATSmi10HeapObject(compiler::TNode<Object> p_o);
  compiler::TNode<Map> kCOWMap();
  compiler::TNode<FixedArray> kEmptyFixedArray();
  void StoreFixedDoubleArrayElementSmi(compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_n);
  void StoreFixedDoubleArrayDirect(compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_v);
  void StoreFixedArrayDirect(compiler::TNode<FixedArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Object> p_v);
  compiler::TNode<Int32T> FastHoleyElementsKind(compiler::TNode<Int32T> p_kind);
  compiler::TNode<Int32T> AllowDoubleElements(compiler::TNode<Int32T> p_kind);
  compiler::TNode<Int32T> AllowNonNumberElements(compiler::TNode<Int32T> p_kind);
  compiler::TNode<JSFunction> GetObjectFunction(compiler::TNode<Context> p_context);
  compiler::TNode<JSReceiver> GetArrayBufferFunction(compiler::TNode<Context> p_context);
  compiler::TNode<JSFunction> GetArrayBufferNoInitFunction(compiler::TNode<Context> p_context);
  compiler::TNode<Map> GetFastPackedSmiElementsJSArrayMap(compiler::TNode<Context> p_context);
  void TorqueMoveElements(compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
  void TorqueMoveElements(compiler::TNode<FixedDoubleArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
  void TorqueCopyElements(compiler::TNode<FixedArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
  void TorqueCopyElements(compiler::TNode<FixedDoubleArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedDoubleArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
  compiler::TNode<Object> LoadElementNoHole10FixedArray(compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
  compiler::TNode<Object> LoadElementNoHole16FixedDoubleArray(compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
  struct FastJSArrayWitness {
    compiler::TNode<JSArray> stable;
    compiler::TNode<JSArray> unstable;
    compiler::TNode<Map> map;
    compiler::TNode<BoolT> hasDoubles;
    compiler::TNode<BoolT> hasSmis;
    compiler::TNode<BoolT> arrayIsPushable;

    std::tuple<compiler::TNode<JSArray>, compiler::TNode<JSArray>, compiler::TNode<Map>, compiler::TNode<BoolT>, compiler::TNode<BoolT>, compiler::TNode<BoolT>> Flatten() const {
      return std::tuple_cat(std::make_tuple(stable), std::make_tuple(unstable), std::make_tuple(map), std::make_tuple(hasDoubles), std::make_tuple(hasSmis), std::make_tuple(arrayIsPushable));
    }
  };
  BaseBuiltinsFromDSLAssembler::FastJSArrayWitness NewFastJSArrayWitness(compiler::TNode<JSArray> p_array);
  compiler::TNode<BoolT> NumberIsNaN(compiler::TNode<Number> p_number);
  compiler::TNode<BoolT> ToBoolean(compiler::TNode<Object> p_obj);
  compiler::TNode<Number> ToIndex(compiler::TNode<Object> p_input, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError);
  compiler::TNode<Number> GetLengthProperty(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  struct KeyValuePair {
    compiler::TNode<Object> key;
    compiler::TNode<Object> value;

    std::tuple<compiler::TNode<Object>, compiler::TNode<Object>> Flatten() const {
      return std::tuple_cat(std::make_tuple(key), std::make_tuple(value));
    }
  };
  compiler::TNode<BoolT> IsFastJSArray(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context);
  void BranchIfFastJSArray(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIfNotFastJSArray(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIfFastJSArrayForCopy(compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  compiler::TNode<BoolT> IsFastJSArrayWithNoCustomIteration(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<Smi> FromConstexpr11ATFrameType21ATconstexpr_FrameType(StackFrame::Type p_t);
  compiler::TNode<Smi> Cast11ATFrameType(compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Object> LoadObjectFromFrame(compiler::TNode<RawPtrT> p_f, int32_t p_o);
  compiler::TNode<RawPtrT> LoadPointerFromFrame(compiler::TNode<RawPtrT> p_f, int32_t p_o);
  compiler::TNode<Smi> LoadSmiFromFrame(compiler::TNode<RawPtrT> p_f, int32_t p_o);
  compiler::TNode<JSFunction> LoadFunctionFromFrame(compiler::TNode<RawPtrT> p_f);
  compiler::TNode<RawPtrT> LoadCallerFromFrame(compiler::TNode<RawPtrT> p_f);
  compiler::TNode<Object> Cast25UT9ATContext11ATFrameType(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Object> LoadContextOrFrameTypeFromFrame(compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f);
  compiler::TNode<Smi> LoadLengthFromAdapterFrame(compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f);
  compiler::TNode<BoolT> FrameTypeEquals(compiler::TNode<Smi> p_f1, compiler::TNode<Smi> p_f2);
  compiler::TNode<RawPtrT> Cast15ATStandardFrame(compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<RawPtrT> Cast23ATArgumentsAdaptorFrame(compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSFunction> LoadTargetFromFrame();
  compiler::TNode<Map> LoadHeapObjectMap(compiler::TNode<HeapObject> p_o);
  void StoreHeapObjectMap(compiler::TNode<HeapObject> p_o, compiler::TNode<Map> p_v);
  compiler::TNode<Object> LoadTuple2Value1(compiler::TNode<Tuple2> p_o);
  void StoreTuple2Value1(compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTuple2Value2(compiler::TNode<Tuple2> p_o);
  void StoreTuple2Value2(compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadTuple3Value3(compiler::TNode<Tuple3> p_o);
  void StoreTuple3Value3(compiler::TNode<Tuple3> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadFixedArrayBaseLength(compiler::TNode<FixedArrayBase> p_o);
  void StoreFixedArrayBaseLength(compiler::TNode<FixedArrayBase> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadJSReceiverPropertiesOrHash(compiler::TNode<JSReceiver> p_o);
  void StoreJSReceiverPropertiesOrHash(compiler::TNode<JSReceiver> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArrayBase> LoadJSObjectElements(compiler::TNode<JSObject> p_o);
  void StoreJSObjectElements(compiler::TNode<JSObject> p_o, compiler::TNode<FixedArrayBase> p_v);
  compiler::TNode<Object> LoadJSProxyTarget(compiler::TNode<JSProxy> p_o);
  void StoreJSProxyTarget(compiler::TNode<JSProxy> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSProxyHandler(compiler::TNode<JSProxy> p_o);
  void StoreJSProxyHandler(compiler::TNode<JSProxy> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSProxyRevocableResultProxy(compiler::TNode<JSProxyRevocableResult> p_o);
  void StoreJSProxyRevocableResultProxy(compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSProxyRevocableResultRevoke(compiler::TNode<JSProxyRevocableResult> p_o);
  void StoreJSProxyRevocableResultRevoke(compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSGlobalProxyNativeContext(compiler::TNode<JSGlobalProxy> p_o);
  void StoreJSGlobalProxyNativeContext(compiler::TNode<JSGlobalProxy> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSValueValue(compiler::TNode<JSValue> p_o);
  void StoreJSValueValue(compiler::TNode<JSValue> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSArgumentsObjectWithLengthLength(compiler::TNode<JSArgumentsObjectWithLength> p_o);
  void StoreJSArgumentsObjectWithLengthLength(compiler::TNode<JSArgumentsObjectWithLength> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Number> LoadJSArrayLength(compiler::TNode<JSArray> p_o);
  void StoreJSArrayLength(compiler::TNode<JSArray> p_o, compiler::TNode<Number> p_v);
  compiler::TNode<BoolT> _method_JSArray_IsEmpty(compiler::TNode<JSArray> p_this);
  compiler::TNode<Object> LoadSharedFunctionInfoFunctionData(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionData(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoNameOrScopeInfo(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoScriptOrDebugInfo(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoLength(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoLength(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Uint32T> LoadSharedFunctionInfoFormalParameterCount(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFormalParameterCount(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoExpectedNofProperties(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoExpectedNofProperties(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoBuiltinFunctionId(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoBuiltinFunctionId(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoFunctionTokenOffset(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFunctionTokenOffset(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoFlags(compiler::TNode<SharedFunctionInfo> p_o);
  void StoreSharedFunctionInfoFlags(compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<Int32T> LoadSharedFunctionInfoWithIDUniqueId(compiler::TNode<SharedFunctionInfoWithID> p_o);
  void StoreSharedFunctionInfoWithIDUniqueId(compiler::TNode<SharedFunctionInfoWithID> p_o, compiler::TNode<Int32T> p_v);
  compiler::TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionSharedFunctionInfo(compiler::TNode<JSFunction> p_o, compiler::TNode<SharedFunctionInfo> p_v);
  compiler::TNode<Context> LoadJSFunctionContext(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionContext(compiler::TNode<JSFunction> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<Smi> LoadJSFunctionFeedbackCell(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionFeedbackCell(compiler::TNode<JSFunction> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Code> LoadJSFunctionCode(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionCode(compiler::TNode<JSFunction> p_o, compiler::TNode<Code> p_v);
  compiler::TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap(compiler::TNode<JSFunction> p_o);
  void StoreJSFunctionPrototypeOrInitialMap(compiler::TNode<JSFunction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundTargetFunction(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Object> LoadJSBoundFunctionBoundThis(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundThis(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<FixedArray> LoadJSBoundFunctionBoundArguments(compiler::TNode<JSBoundFunction> p_o);
  void StoreJSBoundFunctionBoundArguments(compiler::TNode<JSBoundFunction> p_o, compiler::TNode<FixedArray> p_v);
  compiler::TNode<Smi> LoadFixedTypedArrayBaseBasePointer(compiler::TNode<FixedTypedArrayBase> p_o);
  void StoreFixedTypedArrayBaseBasePointer(compiler::TNode<FixedTypedArrayBase> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<RawPtrT> LoadFixedTypedArrayBaseExternalPointer(compiler::TNode<FixedTypedArrayBase> p_o);
  void StoreFixedTypedArrayBaseExternalPointer(compiler::TNode<FixedTypedArrayBase> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferByteLength(compiler::TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferByteLength(compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<RawPtrT> LoadJSArrayBufferBackingStore(compiler::TNode<JSArrayBuffer> p_o);
  void StoreJSArrayBufferBackingStore(compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewBuffer(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<JSArrayBuffer> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteOffset(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteOffset(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteLength(compiler::TNode<JSArrayBufferView> p_o);
  void StoreJSArrayBufferViewByteLength(compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
  compiler::TNode<Smi> LoadJSTypedArrayLength(compiler::TNode<JSTypedArray> p_o);
  void StoreJSTypedArrayLength(compiler::TNode<JSTypedArray> p_o, compiler::TNode<Smi> p_v);
  void _method_JSTypedArray_AttachOffHeapBuffer(compiler::TNode<JSTypedArray> p_this, compiler::TNode<JSArrayBuffer> p_buffer, compiler::TNode<Map> p_map, compiler::TNode<Smi> p_length, compiler::TNode<UintPtrT> p_byteOffset);
  compiler::TNode<Object> LoadJSAccessorPropertyDescriptorGet(compiler::TNode<JSAccessorPropertyDescriptor> p_o);
  void StoreJSAccessorPropertyDescriptorGet(compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSAccessorPropertyDescriptorSet(compiler::TNode<JSAccessorPropertyDescriptor> p_o);
  void StoreJSAccessorPropertyDescriptorSet(compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSAccessorPropertyDescriptorEnumerable(compiler::TNode<JSAccessorPropertyDescriptor> p_o);
  void StoreJSAccessorPropertyDescriptorEnumerable(compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSAccessorPropertyDescriptorConfigurable(compiler::TNode<JSAccessorPropertyDescriptor> p_o);
  void StoreJSAccessorPropertyDescriptorConfigurable(compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSCollectionTable(compiler::TNode<JSCollection> p_o);
  void StoreJSCollectionTable(compiler::TNode<JSCollection> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<RawPtrT> LoadForeignForeignAddress(compiler::TNode<Foreign> p_o);
  void StoreForeignForeignAddress(compiler::TNode<Foreign> p_o, compiler::TNode<RawPtrT> p_v);
  compiler::TNode<Object> LoadInterceptorInfoGetter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoGetter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoSetter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoSetter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoQuery(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoQuery(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDescriptor(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDescriptor(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDeleter(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDeleter(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoEnumerator(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoEnumerator(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoDefiner(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoDefiner(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadInterceptorInfoData(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoData(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadInterceptorInfoFlags(compiler::TNode<InterceptorInfo> p_o);
  void StoreInterceptorInfoFlags(compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoCallback(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoCallback(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoNamedInterceptor(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoNamedInterceptor(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoIndexedInterceptor(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoIndexedInterceptor(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadAccessCheckInfoData(compiler::TNode<AccessCheckInfo> p_o);
  void StoreAccessCheckInfoData(compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadArrayBoilerplateDescriptionFlags(compiler::TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionFlags(compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements(compiler::TNode<ArrayBoilerplateDescription> p_o);
  void StoreArrayBoilerplateDescriptionConstantElements(compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<FixedArrayBase> p_v);
  compiler::TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot(compiler::TNode<AliasedArgumentsEntry> p_o);
  void StoreAliasedArgumentsEntryAliasedContextSlot(compiler::TNode<AliasedArgumentsEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadCellValue(compiler::TNode<Cell> p_o);
  void StoreCellValue(compiler::TNode<Cell> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerSmiHandler(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerSmiHandler(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerValidityCell(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerValidityCell(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData1(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData1(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData2(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData2(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadDataHandlerData3(compiler::TNode<DataHandler> p_o);
  void StoreDataHandlerData3(compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadJSPromiseReactionsOrResult(compiler::TNode<JSPromise> p_o);
  void StoreJSPromiseReactionsOrResult(compiler::TNode<JSPromise> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadJSPromiseFlags(compiler::TNode<JSPromise> p_o);
  void StoreJSPromiseFlags(compiler::TNode<JSPromise> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Foreign> LoadCallbackTaskCallback(compiler::TNode<CallbackTask> p_o);
  void StoreCallbackTaskCallback(compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<Foreign> LoadCallbackTaskData(compiler::TNode<CallbackTask> p_o);
  void StoreCallbackTaskData(compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
  compiler::TNode<JSReceiver> LoadCallableTaskCallable(compiler::TNode<CallableTask> p_o);
  void StoreCallableTaskCallable(compiler::TNode<CallableTask> p_o, compiler::TNode<JSReceiver> p_v);
  compiler::TNode<Context> LoadCallableTaskContext(compiler::TNode<CallableTask> p_o);
  void StoreCallableTaskContext(compiler::TNode<CallableTask> p_o, compiler::TNode<Context> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoLineNumber(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoLineNumber(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoColumnNumber(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoColumnNumber(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoScriptId(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptId(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadStackFrameInfoScriptName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadStackFrameInfoScriptNameOrSourceUrl(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoScriptNameOrSourceUrl(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadStackFrameInfoFunctionName(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFunctionName(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoFlag(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoFlag(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadStackFrameInfoId(compiler::TNode<StackFrameInfo> p_o);
  void StoreStackFrameInfoId(compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadClassPositionsStart(compiler::TNode<ClassPositions> p_o);
  void StoreClassPositionsStart(compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadClassPositionsEnd(compiler::TNode<ClassPositions> p_o);
  void StoreClassPositionsEnd(compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadWasmExceptionTagIndex(compiler::TNode<WasmExceptionTag> p_o);
  void StoreWasmExceptionTagIndex(compiler::TNode<WasmExceptionTag> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadAsyncGeneratorRequestNext(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestNext(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadAsyncGeneratorRequestResumeMode(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestResumeMode(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Object> LoadAsyncGeneratorRequestValue(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestValue(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<JSPromise> LoadAsyncGeneratorRequestPromise(compiler::TNode<AsyncGeneratorRequest> p_o);
  void StoreAsyncGeneratorRequestPromise(compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<JSPromise> p_v);
  compiler::TNode<HeapObject> LoadModuleInfoEntryExportName(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryExportName(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadModuleInfoEntryLocalName(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryLocalName(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadModuleInfoEntryImportName(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryImportName(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Smi> LoadModuleInfoEntryModuleRequest(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryModuleRequest(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadModuleInfoEntryCellIndex(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryCellIndex(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadModuleInfoEntryBegPos(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryBegPos(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<Smi> LoadModuleInfoEntryEndPos(compiler::TNode<ModuleInfoEntry> p_o);
  void StoreModuleInfoEntryEndPos(compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
  compiler::TNode<HeapObject> LoadPromiseCapabilityPromise(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityPromise(compiler::TNode<PromiseCapability> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<Object> LoadPromiseCapabilityResolve(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityResolve(compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadPromiseCapabilityReject(compiler::TNode<PromiseCapability> p_o);
  void StorePromiseCapabilityReject(compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<Object> LoadPromiseReactionNext(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionNext(compiler::TNode<PromiseReaction> p_o, compiler::TNode<Object> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionRejectHandler(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionRejectHandler(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionFulfillHandler(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionFulfillHandler(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> LoadPromiseReactionPromiseOrCapability(compiler::TNode<PromiseReaction> p_o);
  void StorePromiseReactionPromiseOrCapability(compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
  compiler::TNode<HeapObject> Cast10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Uint32T> Convert8ATuint327ATuint8(compiler::TNode<Uint32T> p_i);
  compiler::TNode<Uint32T> Convert8ATuint328ATuint16(compiler::TNode<Uint32T> p_i);
  compiler::TNode<Uint32T> Convert8ATuint328ATuint31(compiler::TNode<Uint32T> p_i);
  compiler::TNode<JSFunction> UnsafeCast10JSFunction(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSReceiver> UnsafeCast13ATConstructor(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<Map> UnsafeCast5ATMap(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSArray> Cast7JSArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  void BranchIf13ATFastJSArray20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIfNot13ATFastJSArray20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  void BranchIf20ATFastJSArrayForCopy20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  compiler::TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<Context> Cast9ATContext(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Object> UnsafeCast25UT9ATContext11ATFrameType(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSReceiver> Cast10JSReceiver(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSReceiver> Cast39UT15JSBoundFunction10JSFunction7JSProxy(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Smi> Convert5ATSmi17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<JSArray> UnsafeCast7JSArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<NumberDictionary> UnsafeCast18ATNumberDictionary(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<FixedArray> UnsafeCast10FixedArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<Smi> UnsafeCast5ATSmi(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<FixedDoubleArray> UnsafeCast16FixedDoubleArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSTypedArray> UnsafeCast12JSTypedArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<String> Cast8ATString(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<HeapObject> UnsafeCast10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSReceiver> Cast13ATConstructor(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast13ATFastJSArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<FixedArray> Cast10FixedArray(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Context> UnsafeCast9ATContext(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSDataView> Cast12ATJSDataView(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<BoolT> Is10JSReceiver20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<Map> Cast5ATMap(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  compiler::TNode<Smi> Convert5ATSmi5ATSmi(compiler::TNode<Smi> p_i);
  compiler::TNode<IntPtrT> Convert8ATintptr17ATconstexpr_int31(int31_t p_i);
  compiler::TNode<JSObject> UnsafeCast8JSObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<HeapNumber> UnsafeCast12ATHeapNumber(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSReceiver> UnsafeCast39UT15JSBoundFunction10JSFunction7JSProxy(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<JSReceiver> UnsafeCast10JSReceiver(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  compiler::TNode<HeapObject> Cast52UT11ATUndefined15JSBoundFunction10JSFunction7JSProxy(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
  void BranchIf34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  compiler::TNode<Number> UnsafeCast22UT12ATHeapNumber5ATSmi(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
  void BranchIf10JSReceiver20UT5ATSmi10HeapObject(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
  compiler::TNode<FixedTypedArrayBase> UnsafeCast19FixedTypedArrayBase(compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
 private:
  compiler::CodeAssemblerState* const state_;
  compiler::CodeAssembler ca_;
};

}  // namespace internal
}  // namespace v8

#endif  // V8_TORQUE_BASE_FROM_DSL_BASE_H__
