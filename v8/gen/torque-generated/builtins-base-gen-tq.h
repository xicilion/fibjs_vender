#ifndef V8_GEN_TORQUE_GENERATED_BASE_NAMESPACE_TQ_H_
#define V8_GEN_TORQUE_GENERATED_BASE_NAMESPACE_TQ_H_

#include "src/compiler/code-assembler.h"
#include "src/codegen/code-stub-assembler.h"
#include "src/utils/utils.h"
#include "torque-generated/field-offsets-tq.h"
#include "torque-generated/csa-types-tq.h"

namespace v8 {
namespace internal {

compiler::TNode<JSObject> NewJSObject_60(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_map, compiler::TNode<Object> p_properties, compiler::TNode<FixedArrayBase> p_elements);
compiler::TNode<JSObject> NewJSObject_61(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetDerivedMap_62(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSFunction> p_target, compiler::TNode<JSReceiver> p_newTarget);
compiler::TNode<JSProxyRevocableResult> NewJSProxyRevocableResult_63(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSProxy> p_proxy, compiler::TNode<JSFunction> p_revoke);
compiler::TNode<JSArray> NewJSArray_64(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map, compiler::TNode<FixedArrayBase> p_elements);
compiler::TNode<JSArray> NewJSArray_65(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSArray> NewJSArray_66(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Map> p_map, compiler::TNode<Smi> p_length);
  compiler::TNode<UintPtrT> kSmiMax_67(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Hole_68(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Null_69(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> Undefined_70(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> True_71(compiler::CodeAssemblerState* state_);
  compiler::TNode<Oddball> False_72(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kEmptyString_73(compiler::CodeAssemblerState* state_);
  compiler::TNode<String> kLengthString_74(compiler::CodeAssemblerState* state_);
  compiler::TNode<HeapNumber> kNaN_75(compiler::CodeAssemblerState* state_);
compiler::TNode<JSIteratorResult> NewJSIteratorResult_76(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_value, compiler::TNode<Oddball> p_done);
int31_t GetStartOfCaptureIndex_77(compiler::CodeAssemblerState* state_, int31_t p_captureIndex);
compiler::TNode<BoolT> ElementsKindNotEqual_78(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_k1, compiler::TNode<Int32T> p_k2);
compiler::TNode<BoolT> IsNumberEqual_79(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<BoolT> IsNumberNotEqual_80(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_a, compiler::TNode<Number> p_b);
compiler::TNode<Number> Min_81(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<Number> Max_82(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_x, compiler::TNode<Number> p_y);
compiler::TNode<String> StringAdd_83(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<String> p_a, compiler::TNode<String> p_b);
compiler::TNode<Smi> Cast5ATSmi_84(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Smi> Cast13ATPositiveSmi_85(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Number> Cast20UT5ATSmi10HeapNumber_86(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast10HeapObject_87(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast6ATNull_88(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast10FixedArray_89(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedDoubleArray> Cast16FixedDoubleArray_90(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast25ATSloppyArgumentsElements_91(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSDataView> Cast10JSDataView_92(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSProxy> Cast7JSProxy_93(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSStringIterator> Cast16JSStringIterator_94(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_95(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSTypedArray> Cast12JSTypedArray_96(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast39UT15JSBoundFunction10JSFunction7JSProxy_97(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast52UT11ATUndefined15JSBoundFunction10JSFunction7JSProxy_98(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast7JSArray_99(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer_100(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Context> Cast7Context_101(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSObject> Cast8JSObject_102(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<NumberDictionary> Cast18ATNumberDictionary_103(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast6String_104(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Oddball> Cast7Oddball_105(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Symbol> Cast6Symbol_106(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<String> Cast14ATDirectString_107(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast13ATConstructor_108(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapNumber> Cast10HeapNumber_109(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast8JSRegExp_110(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Map> Cast3Map_111(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSValue> Cast7JSValue_112(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_113(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSRegExp> Cast14ATFastJSRegExp_114(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast13ATFastJSArray_115(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForRead_116(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy_117(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_118(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_119(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast10JSReceiver_120(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSFunction> Cast10JSFunction_121(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<DebugInfo> Cast9DebugInfo_122(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast14ATCoverageInfo_123(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<HeapObject> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Int32T> FromConstexpr7ATint3117ATconstexpr_int31_124(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int31_125(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Int32T> FromConstexpr7ATint3217ATconstexpr_int32_126(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int31_127(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr17ATconstexpr_int32_128(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<IntPtrT> FromConstexpr8ATintptr18ATconstexpr_intptr_129(compiler::CodeAssemblerState* state_, intptr_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr19ATconstexpr_uintptr_130(compiler::CodeAssemblerState* state_, uintptr_t p_i);
compiler::TNode<Smi> FromConstexpr5ATSmi17ATconstexpr_int31_131(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Smi> FromConstexpr13ATPositiveSmi17ATconstexpr_int31_132(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<String> FromConstexpr6String18ATconstexpr_string_133(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber18ATconstexpr_uint32_134(compiler::CodeAssemblerState* state_, uint32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int32_135(compiler::CodeAssemblerState* state_, int32_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber19ATconstexpr_float64_136(compiler::CodeAssemblerState* state_, double p_f);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber17ATconstexpr_int31_137(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Number> FromConstexpr20UT5ATSmi10HeapNumber15ATconstexpr_Smi_138(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Smi> FromConstexpr5ATSmi15ATconstexpr_Smi_139(compiler::CodeAssemblerState* state_, Smi p_s);
compiler::TNode<Uint32T> FromConstexpr8ATuint3217ATconstexpr_int31_140(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<UintPtrT> FromConstexpr9ATuintptr17ATconstexpr_int31_141(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6417ATconstexpr_int31_142(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<Float64T> FromConstexpr9ATfloat6419ATconstexpr_float64_143(compiler::CodeAssemblerState* state_, double p_i);
compiler::TNode<BoolT> FromConstexpr6ATbool16ATconstexpr_bool_144(compiler::CodeAssemblerState* state_, bool p_b);
compiler::TNode<Smi> FromConstexpr14ATLanguageMode24ATconstexpr_LanguageMode_145(compiler::CodeAssemblerState* state_, LanguageMode p_m);
compiler::TNode<Int32T> FromConstexpr14ATElementsKind24ATconstexpr_ElementsKind_146(compiler::CodeAssemblerState* state_, ElementsKind p_e);
compiler::TNode<Object> FromConstexpr20UT5ATSmi10HeapObject18ATconstexpr_string_147(compiler::CodeAssemblerState* state_, const char* p_s);
compiler::TNode<IntPtrT> FromConstexpr19ATNativeContextSlot29ATconstexpr_NativeContextSlot_148(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<IntPtrT> FromConstexpr13ATContextSlot23ATconstexpr_ContextSlot_149(compiler::CodeAssemblerState* state_, int32_t p_c);
compiler::TNode<Int32T> Convert7ATint3214ATElementsKind_150(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_elementsKind);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber7ATint32_151(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<IntPtrT> Convert8ATintptr7ATint32_152(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<Smi> Convert5ATSmi7ATint32_153(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_i);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber8ATuint32_154(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Smi> Convert5ATSmi8ATuint32_155(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATuint32_156(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_ui);
compiler::TNode<Int32T> Convert7ATint327ATuint8_157(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint16_158(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATuint31_159(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<Int32T> Convert7ATint328ATintptr_160(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert5ATSmi8ATintptr_161(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Uint32T> Convert8ATuint329ATuintptr_162(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<IntPtrT> Convert8ATintptr5ATSmi_163(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<UintPtrT> Convert9ATuintptr13ATPositiveSmi_164(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_ps);
compiler::TNode<IntPtrT> Convert8ATintptr9ATuintptr_165(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_166(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<Smi> Convert13ATPositiveSmi9ATuintptr_167(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Smi> Convert13ATPositiveSmi8ATintptr_168(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i, compiler::CodeAssemblerLabel* label_IfOverflow);
compiler::TNode<Int32T> Convert7ATint325ATSmi_169(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_s);
compiler::TNode<Float64T> Convert9ATfloat6410HeapNumber_170(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_h);
compiler::TNode<Float64T> Convert9ATfloat6420UT5ATSmi10HeapNumber_171(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<UintPtrT> Convert9ATuintptr20UT5ATSmi10HeapNumber_172(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Float64T> Convert9ATfloat649ATfloat32_173(compiler::CodeAssemblerState* state_, compiler::TNode<Float32T> p_f);
compiler::TNode<Float32T> Convert9ATfloat329ATfloat64_174(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_f);
compiler::TNode<Float32T> Convert9ATfloat3220UT5ATSmi10HeapNumber_175(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_n);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATfloat64_176(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<Float64T> Convert9ATfloat649ATuintptr_177(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<Number> Convert20UT5ATSmi10HeapNumber9ATuintptr_178(compiler::CodeAssemblerState* state_, compiler::TNode<UintPtrT> p_ui);
compiler::TNode<UintPtrT> Convert9ATuintptr9ATfloat64_179(compiler::CodeAssemblerState* state_, compiler::TNode<Float64T> p_d);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATintptr_180(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<UintPtrT> Convert9ATuintptr8ATRawPtr_181(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<IntPtrT> Convert8ATintptr8ATRawPtr_182(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_r);
compiler::TNode<BInt> Convert6ATbint7ATint32_183(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_v);
compiler::TNode<BInt> Convert6ATbint8ATintptr_184(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_v);
compiler::TNode<BInt> Convert6ATbint5ATSmi_185(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_v);
compiler::TNode<Object> UnsafeCast20UT5ATSmi10HeapObject_186(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o);
  compiler::TNode<Map> kFixedArrayMap_187(compiler::CodeAssemblerState* state_);
  compiler::TNode<Map> kCOWMap_188(compiler::CodeAssemblerState* state_);
  compiler::TNode<ByteArray> kEmptyByteArray_189(compiler::CodeAssemblerState* state_);
  compiler::TNode<FixedArray> kEmptyFixedArray_190(compiler::CodeAssemblerState* state_);
void StoreFastJSArrayLength_191(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array, compiler::TNode<Smi> p_length);
void StoreFixedDoubleArrayElementSmi_192(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_n);
void StoreFixedDoubleArrayDirect_193(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Number> p_v);
void StoreFixedArrayDirect_194(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_a, compiler::TNode<Smi> p_i, compiler::TNode<Object> p_v);
compiler::TNode<Int32T> FastHoleyElementsKind_195(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowDoubleElements_196(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<Int32T> AllowNonNumberElements_197(compiler::CodeAssemblerState* state_, compiler::TNode<Int32T> p_kind);
compiler::TNode<JSFunction> GetObjectFunction_198(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSReceiver> GetArrayBufferFunction_199(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSFunction> GetArrayBufferNoInitFunction_200(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedElementsJSArrayMap_201(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetFastPackedSmiElementsJSArrayMap_202(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetProxyRevocableResultMap_203(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetIteratorResultMap_204(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<Map> GetInitialStringIteratorMap_205(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<JSReceiver> GetReflectApply_206(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
compiler::TNode<RegExpMatchInfo> GetRegExpLastMatchInfo_207(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context);
void TorqueMoveElementsSmi_208(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_209(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueMoveElements_210(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_elements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_211(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
void TorqueCopyElements_212(compiler::CodeAssemblerState* state_, compiler::TNode<FixedDoubleArray> p_dstElements, compiler::TNode<IntPtrT> p_dstIndex, compiler::TNode<FixedDoubleArray> p_srcElements, compiler::TNode<IntPtrT> p_srcIndex, compiler::TNode<IntPtrT> p_count);
compiler::TNode<Object> LoadElementNoHole10FixedArray_213(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
compiler::TNode<Object> LoadElementNoHole16FixedDoubleArray_214(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<JSArray> p_a, compiler::TNode<Smi> p_index, compiler::CodeAssemblerLabel* label_IfHole);
TorqueStructFastJSArrayWitness NewFastJSArrayWitness_215(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_array);
compiler::TNode<BoolT> NumberIsNaN_216(compiler::CodeAssemblerState* state_, compiler::TNode<Number> p_number);
compiler::TNode<BoolT> ToBoolean_217(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_obj);
compiler::TNode<Number> ToIndex_218(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_input, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_RangeError);
compiler::TNode<Number> GetLengthProperty_219(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> GetMethod_220(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, const char* p_name, compiler::CodeAssemblerLabel* label_IfNullOrUndefined);
compiler::TNode<BoolT> IsFastJSArray_221(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context);
void BranchIfFastJSArray_222(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfFastJSArrayForRead_223(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfNotFastJSArray_224(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfFastJSArrayForCopy_225(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::TNode<Context> p_context, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<BoolT> IsFastJSArrayWithNoCustomIteration_226(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> IsFastJSArrayForReadWithNoCustomIteration_227(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<String> ToStringImpl_228(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Smi> FromConstexpr11ATFrameType21ATconstexpr_FrameType_256(compiler::CodeAssemblerState* state_, StackFrame::Type p_t);
compiler::TNode<Smi> Cast11ATFrameType_257(compiler::CodeAssemblerState* state_, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> LoadObjectFromFrame_258(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_f, int32_t p_o);
compiler::TNode<RawPtrT> LoadPointerFromFrame_259(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_f, int32_t p_o);
compiler::TNode<Smi> LoadSmiFromFrame_260(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_f, int32_t p_o);
compiler::TNode<JSFunction> LoadFunctionFromFrame_261(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_f);
compiler::TNode<RawPtrT> LoadCallerFromFrame_262(compiler::CodeAssemblerState* state_, compiler::TNode<RawPtrT> p_f);
compiler::TNode<Object> Cast23UT11ATFrameType7Context_263(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> LoadContextOrFrameTypeFromFrame_264(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f);
compiler::TNode<Smi> LoadLengthFromAdapterFrame_265(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f);
compiler::TNode<BoolT> FrameTypeEquals_266(compiler::CodeAssemblerState* state_, compiler::TNode<Smi> p_f1, compiler::TNode<Smi> p_f2);
compiler::TNode<RawPtrT> Cast15ATStandardFrame_267(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<RawPtrT> Cast23ATArgumentsAdaptorFrame_268(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RawPtrT> p_f, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSFunction> LoadTargetFromFrame_269(compiler::CodeAssemblerState* state_);
compiler::TNode<Map> LoadHeapObjectMap_436(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o);
void StoreHeapObjectMap_437(compiler::CodeAssemblerState* state_, compiler::TNode<HeapObject> p_o, compiler::TNode<Map> p_v);
compiler::TNode<Smi> LoadContextLength_438(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextLength_439(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ScopeInfo> LoadContextScopeInfo_440(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextScopeInfo_441(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<ScopeInfo> p_v);
compiler::TNode<Object> LoadContextPrevious_442(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextPrevious_443(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextExtension_444(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextExtension_445(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadContextNativeContext_446(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o);
void StoreContextNativeContext_447(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSReceiverPropertiesOrHash_448(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o);
void StoreJSReceiverPropertiesOrHash_449(compiler::CodeAssemblerState* state_, compiler::TNode<JSReceiver> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Float64T> LoadHeapNumberValue_450(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o);
void StoreHeapNumberValue_451(compiler::CodeAssemblerState* state_, compiler::TNode<HeapNumber> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<Smi> LoadFixedArrayBaseLength_452(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o);
void StoreFixedArrayBaseLength_453(compiler::CodeAssemblerState* state_, compiler::TNode<FixedArrayBase> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadNameHashField_454(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o);
void StoreNameHashField_455(compiler::CodeAssemblerState* state_, compiler::TNode<Name> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Uint32T> LoadStringLength_456(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o);
void StoreStringLength_457(compiler::CodeAssemblerState* state_, compiler::TNode<String> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<FixedArrayBase> LoadJSObjectElements_458(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o);
void StoreJSObjectElements_459(compiler::CodeAssemblerState* state_, compiler::TNode<JSObject> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Number> LoadJSArrayLength_460(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o);
void StoreJSArrayLength_461(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_o, compiler::TNode<Number> p_v);
compiler::TNode<BoolT> _method_JSArray_IsEmpty(compiler::CodeAssemblerState* state_, compiler::TNode<JSArray> p_this);
compiler::TNode<Float64T> LoadOddballToNumberRaw_462(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumberRaw_463(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Float64T> p_v);
compiler::TNode<String> LoadOddballToString_464(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToString_465(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Number> LoadOddballToNumber_466(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballToNumber_467(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Number> p_v);
compiler::TNode<String> LoadOddballTypeOf_468(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballTypeOf_469(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadOddballKind_470(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o);
void StoreOddballKind_471(compiler::CodeAssemblerState* state_, compiler::TNode<Oddball> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadSymbolFlags_472(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolFlags_473(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Object> LoadSymbolName_474(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o);
void StoreSymbolName_475(compiler::CodeAssemblerState* state_, compiler::TNode<Symbol> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadConsStringFirst_476(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringFirst_477(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<String> LoadConsStringSecond_478(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o);
void StoreConsStringSecond_479(compiler::CodeAssemblerState* state_, compiler::TNode<ConsString> p_o, compiler::TNode<String> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResource_480(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResource_481(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadExternalStringResourceData_482(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o);
void StoreExternalStringResourceData_483(compiler::CodeAssemblerState* state_, compiler::TNode<ExternalString> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<String> LoadSlicedStringParent_484(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringParent_485(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadSlicedStringOffset_486(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o);
void StoreSlicedStringOffset_487(compiler::CodeAssemblerState* state_, compiler::TNode<SlicedString> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<String> LoadThinStringActual_488(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o);
void StoreThinStringActual_489(compiler::CodeAssemblerState* state_, compiler::TNode<ThinString> p_o, compiler::TNode<String> p_v);
compiler::TNode<Object> LoadTuple2Value1_490(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value1_491(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple2Value2_492(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o);
void StoreTuple2Value2_493(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple2> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTuple3Value3_494(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o);
void StoreTuple3Value3_495(compiler::CodeAssemblerState* state_, compiler::TNode<Tuple3> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadWeakFixedArrayLength_496(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o);
void StoreWeakFixedArrayLength_497(compiler::CodeAssemblerState* state_, compiler::TNode<WeakFixedArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Uint8T> LoadMapInstanceSizeInWords_498(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceSizeInWords_499(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapInObjectPropertiesStartOrConstructorFunctionIndex_500(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInObjectPropertiesStartOrConstructorFunctionIndex_501(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapUsedOrUnusedInstanceSizeInWords_502(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapUsedOrUnusedInstanceSizeInWords_503(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapVisitorId_504(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapVisitorId_505(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Int16T> LoadMapInstanceType_506(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceType_507(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Uint8T> LoadMapBitField_508(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField_509(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint8T> LoadMapBitField2_510(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField2_511(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint8T> p_v);
compiler::TNode<Uint32T> LoadMapBitField3_512(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapBitField3_513(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<Uint32T> LoadMapOptionalPadding_514(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapOptionalPadding_515(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadMapPrototype_516(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototype_517(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadMapConstructorOrBackPointer_518(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapConstructorOrBackPointer_519(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<DescriptorArray> LoadMapInstanceDescriptors_520(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapInstanceDescriptors_521(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<DescriptorArray> p_v);
compiler::TNode<LayoutDescriptor> LoadMapLayoutDescriptor_522(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapLayoutDescriptor_523(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<LayoutDescriptor> p_v);
compiler::TNode<WeakFixedArray> LoadMapDependentCode_524(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapDependentCode_525(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<Object> LoadMapPrototypeValidityCell_526(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapPrototypeValidityCell_527(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadMapTransitionsOrPrototypeInfo_528(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o);
void StoreMapTransitionsOrPrototypeInfo_529(compiler::CodeAssemblerState* state_, compiler::TNode<Map> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadEnumCacheKeys_530(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheKeys_531(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadEnumCacheIndices_532(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o);
void StoreEnumCacheIndices_533(compiler::CodeAssemblerState* state_, compiler::TNode<EnumCache> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadSourcePositionTableWithFrameCacheSourcePositionTable_534(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheSourcePositionTable_535(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<Object> LoadSourcePositionTableWithFrameCacheStackFrameCache_536(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o);
void StoreSourcePositionTableWithFrameCacheStackFrameCache_537(compiler::CodeAssemblerState* state_, compiler::TNode<SourcePositionTableWithFrameCache> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfAllDescriptors_538(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfAllDescriptors_539(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayNumberOfDescriptors_540(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayNumberOfDescriptors_541(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayRawNumberOfMarkedDescriptors_542(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayRawNumberOfMarkedDescriptors_543(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadDescriptorArrayFiller16Bits_544(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayFiller16Bits_545(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<EnumCache> LoadDescriptorArrayEnumCache_546(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o);
void StoreDescriptorArrayEnumCache_547(compiler::CodeAssemblerState* state_, compiler::TNode<DescriptorArray> p_o, compiler::TNode<EnumCache> p_v);
compiler::TNode<SharedFunctionInfo> LoadJSFunctionSharedFunctionInfo_548(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionSharedFunctionInfo_549(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Context> LoadJSFunctionContext_550(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionContext_551(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Context> p_v);
compiler::TNode<FeedbackCell> LoadJSFunctionFeedbackCell_552(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionFeedbackCell_553(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<FeedbackCell> p_v);
compiler::TNode<Code> LoadJSFunctionCode_554(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionCode_555(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<Code> p_v);
compiler::TNode<HeapObject> LoadJSFunctionPrototypeOrInitialMap_556(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o);
void StoreJSFunctionPrototypeOrInitialMap_557(compiler::CodeAssemblerState* state_, compiler::TNode<JSFunction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSProxyTarget_558(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyTarget_559(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSProxyHandler_560(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o);
void StoreJSProxyHandler_561(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxy> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultProxy_562(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultProxy_563(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSProxyRevocableResultRevoke_564(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o);
void StoreJSProxyRevocableResultRevoke_565(compiler::CodeAssemblerState* state_, compiler::TNode<JSProxyRevocableResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGlobalProxyNativeContext_566(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o);
void StoreJSGlobalProxyNativeContext_567(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalProxy> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSValueValue_568(compiler::CodeAssemblerState* state_, compiler::TNode<JSValue> p_o);
void StoreJSValueValue_569(compiler::CodeAssemblerState* state_, compiler::TNode<JSValue> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSArgumentsObjectWithLengthLength_570(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o);
void StoreJSArgumentsObjectWithLengthLength_571(compiler::CodeAssemblerState* state_, compiler::TNode<JSArgumentsObjectWithLength> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSSloppyArgumentsObjectCallee_572(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o);
void StoreJSSloppyArgumentsObjectCallee_573(compiler::CodeAssemblerState* state_, compiler::TNode<JSSloppyArgumentsObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSReceiver> LoadJSArrayIteratorIteratedObject_574(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorIteratedObject_575(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Number> LoadJSArrayIteratorNextIndex_576(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorNextIndex_577(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Number> p_v);
compiler::TNode<Smi> LoadJSArrayIteratorKind_578(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o);
void StoreJSArrayIteratorKind_579(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSWeakCollectionTable_580(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o);
void StoreJSWeakCollectionTable_581(compiler::CodeAssemblerState* state_, compiler::TNode<JSWeakCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorTable_582(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorTable_583(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionIteratorIndex_584(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o);
void StoreJSCollectionIteratorIndex_585(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollectionIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSMessageObjectMessageType_586(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectMessageType_587(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSMessageObjectArguments_588(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectArguments_589(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Script> LoadJSMessageObjectScript_590(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectScript_591(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<Object> LoadJSMessageObjectStackFrames_592(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStackFrames_593(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadJSMessageObjectSharedInfo_594(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectSharedInfo_595(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSMessageObjectBytecodeOffset_596(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectBytecodeOffset_597(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectStartPosition_598(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectStartPosition_599(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectEndPosition_600(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectEndPosition_601(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSMessageObjectErrorLevel_602(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o);
void StoreJSMessageObjectErrorLevel_603(compiler::CodeAssemblerState* state_, compiler::TNode<JSMessageObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPrototypeInfoJsModuleNamespace_604(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoJsModuleNamespace_605(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPrototypeInfoPrototypeUsers_606(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoPrototypeUsers_607(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPrototypeInfoRegistrySlot_608(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoRegistrySlot_609(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPrototypeInfoValidityCell_610(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoValidityCell_611(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPrototypeInfoObjectCreateMap_612(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoObjectCreateMap_613(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPrototypeInfoBitField_614(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o);
void StorePrototypeInfoBitField_615(compiler::CodeAssemblerState* state_, compiler::TNode<PrototypeInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSource_616(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSource_617(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptName_618(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptName_619(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptLineOffset_620(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineOffset_621(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadScriptColumnOffset_622(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptColumnOffset_623(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptContext_624(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptContext_625(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptScriptType_626(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptScriptType_627(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptLineEnds_628(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptLineEnds_629(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptId_630(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptId_631(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptEvalFromSharedOrWrappedArguments_632(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromSharedOrWrappedArguments_633(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptEvalFromPosition_634(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptEvalFromPosition_635(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSharedFunctionInfos_636(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSharedFunctionInfos_637(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadScriptFlags_638(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptFlags_639(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadScriptSourceUrl_640(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceUrl_641(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptSourceMappingUrl_642(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptSourceMappingUrl_643(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadScriptHostDefinedOptions_644(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o);
void StoreScriptHostDefinedOptions_645(compiler::CodeAssemblerState* state_, compiler::TNode<Script> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadEmbedderDataArrayLength_646(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o);
void StoreEmbedderDataArrayLength_647(compiler::CodeAssemblerState* state_, compiler::TNode<EmbedderDataArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Int32T> LoadPreparseDataDataLength_648(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataDataLength_649(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadPreparseDataInnerLength_650(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o);
void StorePreparseDataInnerLength_651(compiler::CodeAssemblerState* state_, compiler::TNode<PreparseData> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<FixedArrayBase> LoadInterpreterDataBytecodeArray_652(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataBytecodeArray_653(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Code> LoadInterpreterDataInterpreterTrampoline_654(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o);
void StoreInterpreterDataInterpreterTrampoline_655(compiler::CodeAssemblerState* state_, compiler::TNode<InterpreterData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoFunctionData_656(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionData_657(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadSharedFunctionInfoNameOrScopeInfo_658(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoNameOrScopeInfo_659(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_660(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoOuterScopeInfoOrFeedbackMetadata_661(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadSharedFunctionInfoScriptOrDebugInfo_662(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoScriptOrDebugInfo_663(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoLength_664(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoLength_665(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoFormalParameterCount_666(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFormalParameterCount_667(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Uint16T> LoadSharedFunctionInfoExpectedNofProperties_668(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoExpectedNofProperties_669(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Uint16T> p_v);
compiler::TNode<Int16T> LoadSharedFunctionInfoFunctionTokenOffset_670(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFunctionTokenOffset_671(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int16T> p_v);
compiler::TNode<Int32T> LoadSharedFunctionInfoFlags_672(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o);
void StoreSharedFunctionInfoFlags_673(compiler::CodeAssemblerState* state_, compiler::TNode<SharedFunctionInfo> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<JSReceiver> LoadJSBoundFunctionBoundTargetFunction_674(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundTargetFunction_675(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Object> LoadJSBoundFunctionBoundThis_676(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundThis_677(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadJSBoundFunctionBoundArguments_678(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o);
void StoreJSBoundFunctionBoundArguments_679(compiler::CodeAssemblerState* state_, compiler::TNode<JSBoundFunction> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadFreeSpaceSize_680(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceSize_681(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FreeSpace> LoadFreeSpaceNext_682(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o);
void StoreFreeSpaceNext_683(compiler::CodeAssemblerState* state_, compiler::TNode<FreeSpace> p_o, compiler::TNode<FreeSpace> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferByteLength_684(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferByteLength_685(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSArrayBufferBackingStore_686(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o);
void StoreJSArrayBufferBackingStore_687(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBuffer> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<JSArrayBuffer> LoadJSArrayBufferViewBuffer_688(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewBuffer_689(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteOffset_690(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteOffset_691(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSArrayBufferViewByteLength_692(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o);
void StoreJSArrayBufferViewByteLength_693(compiler::CodeAssemblerState* state_, compiler::TNode<JSArrayBufferView> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<UintPtrT> LoadJSTypedArrayLength_694(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayLength_695(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<UintPtrT> p_v);
compiler::TNode<RawPtrT> LoadJSTypedArrayExternalPointer_696(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayExternalPointer_697(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadJSTypedArrayBasePointer_698(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o);
void StoreJSTypedArrayBasePointer_699(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_o, compiler::TNode<Object> p_v);
void _method_JSTypedArray_AttachOffHeapBuffer(compiler::CodeAssemblerState* state_, compiler::TNode<JSTypedArray> p_this, compiler::TNode<JSArrayBuffer> p_buffer, compiler::TNode<UintPtrT> p_byteOffset);
compiler::TNode<Object> LoadJSAccessorPropertyDescriptorGet_700(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o);
void StoreJSAccessorPropertyDescriptorGet_701(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSAccessorPropertyDescriptorSet_702(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o);
void StoreJSAccessorPropertyDescriptorSet_703(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSAccessorPropertyDescriptorEnumerable_704(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o);
void StoreJSAccessorPropertyDescriptorEnumerable_705(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSAccessorPropertyDescriptorConfigurable_706(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o);
void StoreJSAccessorPropertyDescriptorConfigurable_707(compiler::CodeAssemblerState* state_, compiler::TNode<JSAccessorPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSCollectionTable_708(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o);
void StoreJSCollectionTable_709(compiler::CodeAssemblerState* state_, compiler::TNode<JSCollection> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateValue_710(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateValue_711(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateYear_712(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateYear_713(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMonth_714(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMonth_715(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateDay_716(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateDay_717(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateWeekday_718(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateWeekday_719(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateHour_720(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateHour_721(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateMin_722(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateMin_723(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateSec_724(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateSec_725(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDateCacheStamp_726(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o);
void StoreJSDateCacheStamp_727(compiler::CodeAssemblerState* state_, compiler::TNode<JSDate> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Context> LoadJSGlobalObjectNativeContext_728(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectNativeContext_729(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<Context> p_v);
compiler::TNode<JSGlobalProxy> LoadJSGlobalObjectGlobalProxy_730(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o);
void StoreJSGlobalObjectGlobalProxy_731(compiler::CodeAssemblerState* state_, compiler::TNode<JSGlobalObject> p_o, compiler::TNode<JSGlobalProxy> p_v);
compiler::TNode<JSReceiver> LoadJSAsyncFromSyncIteratorSyncIterator_732(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorSyncIterator_733(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Object> LoadJSAsyncFromSyncIteratorNext_734(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o);
void StoreJSAsyncFromSyncIteratorNext_735(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFromSyncIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSStringIteratorString_736(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorString_737(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSStringIteratorNextIndex_738(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o);
void StoreJSStringIteratorNextIndex_739(compiler::CodeAssemblerState* state_, compiler::TNode<JSStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSDataPropertyDescriptorValue_740(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o);
void StoreJSDataPropertyDescriptorValue_741(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDataPropertyDescriptorWritable_742(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o);
void StoreJSDataPropertyDescriptorWritable_743(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDataPropertyDescriptorEnumerable_744(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o);
void StoreJSDataPropertyDescriptorEnumerable_745(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSDataPropertyDescriptorConfigurable_746(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o);
void StoreJSDataPropertyDescriptorConfigurable_747(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataPropertyDescriptor> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoTag_748(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoTag_749(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoSerialNumber_750(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoSerialNumber_751(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadTemplateInfoNumberOfProperties_752(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoNumberOfProperties_753(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyList_754(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyList_755(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadTemplateInfoPropertyAccessors_756(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o);
void StoreTemplateInfoPropertyAccessors_757(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionRawStrings_758(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionRawStrings_759(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<FixedArray> LoadTemplateObjectDescriptionCookedStrings_760(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o);
void StoreTemplateObjectDescriptionCookedStrings_761(compiler::CodeAssemblerState* state_, compiler::TNode<TemplateObjectDescription> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeTemplate_762(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeTemplate_763(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataPrototypeProviderTemplate_764(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataPrototypeProviderTemplate_765(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataParentTemplate_766(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataParentTemplate_767(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataNamedPropertyHandler_768(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataNamedPropertyHandler_769(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataIndexedPropertyHandler_770(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataIndexedPropertyHandler_771(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceTemplate_772(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceTemplate_773(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataInstanceCallHandler_774(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataInstanceCallHandler_775(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateRareDataAccessCheckInfo_776(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o);
void StoreFunctionTemplateRareDataAccessCheckInfo_777(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateRareData> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCallCode_778(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCallCode_779(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoClassName_780(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoClassName_781(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSignature_782(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSignature_783(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoFunctionTemplateRareData_784(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFunctionTemplateRareData_785(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoSharedFunctionInfo_786(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoSharedFunctionInfo_787(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoFlag_788(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoFlag_789(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadFunctionTemplateInfoLength_790(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoLength_791(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadFunctionTemplateInfoCachedPropertyName_792(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o);
void StoreFunctionTemplateInfoCachedPropertyName_793(compiler::CodeAssemblerState* state_, compiler::TNode<FunctionTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoConstructor_794(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoConstructor_795(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadObjectTemplateInfoData_796(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o);
void StoreObjectTemplateInfoData_797(compiler::CodeAssemblerState* state_, compiler::TNode<ObjectTemplateInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadPropertyArrayLengthAndHash_798(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o);
void StorePropertyArrayLengthAndHash_799(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyArray> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Name> LoadPropertyCellName_800(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellName_801(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Name> p_v);
compiler::TNode<Smi> LoadPropertyCellPropertyDetailsRaw_802(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellPropertyDetailsRaw_803(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadPropertyCellValue_804(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellValue_805(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<WeakFixedArray> LoadPropertyCellDependentCode_806(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o);
void StorePropertyCellDependentCode_807(compiler::CodeAssemblerState* state_, compiler::TNode<PropertyCell> p_o, compiler::TNode<WeakFixedArray> p_v);
compiler::TNode<RawPtrT> LoadJSDataViewDataPointer_808(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o);
void StoreJSDataViewDataPointer_809(compiler::CodeAssemblerState* state_, compiler::TNode<JSDataView> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadForeignForeignAddress_810(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o);
void StoreForeignForeignAddress_811(compiler::CodeAssemblerState* state_, compiler::TNode<Foreign> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Object> LoadInterceptorInfoGetter_812(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoGetter_813(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoSetter_814(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoSetter_815(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoQuery_816(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoQuery_817(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDescriptor_818(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDescriptor_819(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDeleter_820(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDeleter_821(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoEnumerator_822(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoEnumerator_823(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoDefiner_824(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoDefiner_825(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadInterceptorInfoData_826(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoData_827(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadInterceptorInfoFlags_828(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o);
void StoreInterceptorInfoFlags_829(compiler::CodeAssemblerState* state_, compiler::TNode<InterceptorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessCheckInfoCallback_830(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoCallback_831(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoNamedInterceptor_832(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoNamedInterceptor_833(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoIndexedInterceptor_834(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoIndexedInterceptor_835(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessCheckInfoData_836(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o);
void StoreAccessCheckInfoData_837(compiler::CodeAssemblerState* state_, compiler::TNode<AccessCheckInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadArrayBoilerplateDescriptionFlags_838(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionFlags_839(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArrayBase> LoadArrayBoilerplateDescriptionConstantElements_840(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o);
void StoreArrayBoilerplateDescriptionConstantElements_841(compiler::CodeAssemblerState* state_, compiler::TNode<ArrayBoilerplateDescription> p_o, compiler::TNode<FixedArrayBase> p_v);
compiler::TNode<Smi> LoadAliasedArgumentsEntryAliasedContextSlot_842(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o);
void StoreAliasedArgumentsEntryAliasedContextSlot_843(compiler::CodeAssemblerState* state_, compiler::TNode<AliasedArgumentsEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadCellValue_844(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o);
void StoreCellValue_845(compiler::CodeAssemblerState* state_, compiler::TNode<Cell> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerSmiHandler_846(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerSmiHandler_847(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerValidityCell_848(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerValidityCell_849(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData1_850(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData1_851(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData2_852(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData2_853(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadDataHandlerData3_854(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o);
void StoreDataHandlerData3_855(compiler::CodeAssemblerState* state_, compiler::TNode<DataHandler> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSFunction> LoadJSGeneratorObjectFunction_856(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectFunction_857(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<JSFunction> p_v);
compiler::TNode<Context> LoadJSGeneratorObjectContext_858(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContext_859(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectReceiver_860(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectReceiver_861(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSGeneratorObjectInputOrDebugPos_862(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectInputOrDebugPos_863(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectResumeMode_864(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectResumeMode_865(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadJSGeneratorObjectContinuation_866(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectContinuation_867(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<FixedArray> LoadJSGeneratorObjectParametersAndRegisters_868(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o);
void StoreJSGeneratorObjectParametersAndRegisters_869(compiler::CodeAssemblerState* state_, compiler::TNode<JSGeneratorObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<JSPromise> LoadJSAsyncFunctionObjectPromise_870(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o);
void StoreJSAsyncFunctionObjectPromise_871(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncFunctionObject> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadJSAsyncGeneratorObjectQueue_872(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectQueue_873(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadJSAsyncGeneratorObjectIsAwaiting_874(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o);
void StoreJSAsyncGeneratorObjectIsAwaiting_875(compiler::CodeAssemblerState* state_, compiler::TNode<JSAsyncGeneratorObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadJSPromiseReactionsOrResult_876(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseReactionsOrResult_877(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadJSPromiseFlags_878(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o);
void StoreJSPromiseFlags_879(compiler::CodeAssemblerState* state_, compiler::TNode<JSPromise> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Foreign> LoadCallbackTaskCallback_880(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskCallback_881(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<Foreign> LoadCallbackTaskData_882(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o);
void StoreCallbackTaskData_883(compiler::CodeAssemblerState* state_, compiler::TNode<CallbackTask> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<JSReceiver> LoadCallableTaskCallable_884(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskCallable_885(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<Context> LoadCallableTaskContext_886(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o);
void StoreCallableTaskContext_887(compiler::CodeAssemblerState* state_, compiler::TNode<CallableTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<Smi> LoadStackFrameInfoLineNumber_888(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoLineNumber_889(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoColumnNumber_890(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoColumnNumber_891(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoPromiseAllIndex_892(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoPromiseAllIndex_893(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadStackFrameInfoScriptId_894(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptId_895(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadStackFrameInfoScriptName_896(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptName_897(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadStackFrameInfoScriptNameOrSourceUrl_898(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoScriptNameOrSourceUrl_899(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadStackFrameInfoFunctionName_900(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFunctionName_901(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadStackFrameInfoWasmModuleName_902(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoWasmModuleName_903(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadStackFrameInfoFlag_904(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o);
void StoreStackFrameInfoFlag_905(compiler::CodeAssemblerState* state_, compiler::TNode<StackFrameInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadStackTraceFrameFrameArray_906(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameArray_907(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadStackTraceFrameFrameIndex_908(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameIndex_909(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadStackTraceFrameFrameInfo_910(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameFrameInfo_911(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadStackTraceFrameId_912(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o);
void StoreStackTraceFrameId_913(compiler::CodeAssemblerState* state_, compiler::TNode<StackTraceFrame> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsStart_914(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsStart_915(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadClassPositionsEnd_916(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o);
void StoreClassPositionsEnd_917(compiler::CodeAssemblerState* state_, compiler::TNode<ClassPositions> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Code> LoadWasmExportedFunctionDataWrapperCode_918(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataWrapperCode_919(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<JSObject> LoadWasmExportedFunctionDataInstance_920(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataInstance_921(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataJumpTableOffset_922(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataJumpTableOffset_923(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmExportedFunctionDataFunctionIndex_924(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o);
void StoreWasmExportedFunctionDataFunctionIndex_925(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExportedFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Code> LoadWasmJSFunctionDataWrapperCode_926(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataWrapperCode_927(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedReturnCount_928(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedReturnCount_929(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmJSFunctionDataSerializedParameterCount_930(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedParameterCount_931(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmJSFunctionDataSerializedSignature_932(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o);
void StoreWasmJSFunctionDataSerializedSignature_933(compiler::CodeAssemblerState* state_, compiler::TNode<WasmJSFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataCallTarget_934(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataCallTarget_935(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<RawPtrT> LoadWasmCapiFunctionDataEmbedderData_936(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataEmbedderData_937(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<RawPtrT> p_v);
compiler::TNode<Code> LoadWasmCapiFunctionDataWrapperCode_938(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataWrapperCode_939(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<Code> p_v);
compiler::TNode<ByteArray> LoadWasmCapiFunctionDataSerializedSignature_940(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o);
void StoreWasmCapiFunctionDataSerializedSignature_941(compiler::CodeAssemblerState* state_, compiler::TNode<WasmCapiFunctionData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<JSObject> LoadWasmDebugInfoInstance_942(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInstance_943(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<JSObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoInterpreterHandle_944(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoInterpreterHandle_945(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoLocalsNames_946(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoLocalsNames_947(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntries_948(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntries_949(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmDebugInfoCWasmEntryMap_950(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o);
void StoreWasmDebugInfoCWasmEntryMap_951(compiler::CodeAssemblerState* state_, compiler::TNode<WasmDebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadWasmExceptionTagIndex_952(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o);
void StoreWasmExceptionTagIndex_953(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionTag> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadAsyncGeneratorRequestNext_954(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestNext_955(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadAsyncGeneratorRequestResumeMode_956(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestResumeMode_957(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAsyncGeneratorRequestValue_958(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestValue_959(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<Object> p_v);
compiler::TNode<JSPromise> LoadAsyncGeneratorRequestPromise_960(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o);
void StoreAsyncGeneratorRequestPromise_961(compiler::CodeAssemblerState* state_, compiler::TNode<AsyncGeneratorRequest> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<HeapObject> LoadModuleInfoEntryExportName_962(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryExportName_963(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadModuleInfoEntryLocalName_964(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryLocalName_965(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadModuleInfoEntryImportName_966(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryImportName_967(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Smi> LoadModuleInfoEntryModuleRequest_968(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryModuleRequest_969(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadModuleInfoEntryCellIndex_970(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryCellIndex_971(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadModuleInfoEntryBegPos_972(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryBegPos_973(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadModuleInfoEntryEndPos_974(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o);
void StoreModuleInfoEntryEndPos_975(compiler::CodeAssemblerState* state_, compiler::TNode<ModuleInfoEntry> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadPromiseCapabilityPromise_976(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityPromise_977(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseCapabilityResolve_978(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityResolve_979(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseCapabilityReject_980(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o);
void StorePromiseCapabilityReject_981(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseCapability> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadPromiseReactionNext_982(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionNext_983(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<Object> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionRejectHandler_984(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionRejectHandler_985(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionFulfillHandler_986(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionFulfillHandler_987(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionPromiseOrCapability_988(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o);
void StorePromiseReactionPromiseOrCapability_989(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReaction> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadPromiseReactionJobTaskArgument_990(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskArgument_991(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Context> LoadPromiseReactionJobTaskContext_992(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskContext_993(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskHandler_994(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskHandler_995(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadPromiseReactionJobTaskPromiseOrCapability_996(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o);
void StorePromiseReactionJobTaskPromiseOrCapability_997(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseReactionJobTask> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Context> LoadPromiseResolveThenableJobTaskContext_998(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskContext_999(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<Context> p_v);
compiler::TNode<JSPromise> LoadPromiseResolveThenableJobTaskPromiseToResolve_1000(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskPromiseToResolve_1001(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSPromise> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThen_1002(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThen_1003(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<JSReceiver> LoadPromiseResolveThenableJobTaskThenable_1004(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o);
void StorePromiseResolveThenableJobTaskThenable_1005(compiler::CodeAssemblerState* state_, compiler::TNode<PromiseResolveThenableJobTask> p_o, compiler::TNode<JSReceiver> p_v);
compiler::TNode<HeapObject> LoadJSRegExpData_1006(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpData_1007(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadJSRegExpSource_1008(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpSource_1009(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Object> LoadJSRegExpFlags_1010(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o);
void StoreJSRegExpFlags_1011(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExp> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSIteratorResultValue_1012(compiler::CodeAssemblerState* state_, compiler::TNode<JSIteratorResult> p_o);
void StoreJSIteratorResultValue_1013(compiler::CodeAssemblerState* state_, compiler::TNode<JSIteratorResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Oddball> LoadJSIteratorResultDone_1014(compiler::CodeAssemblerState* state_, compiler::TNode<JSIteratorResult> p_o);
void StoreJSIteratorResultDone_1015(compiler::CodeAssemblerState* state_, compiler::TNode<JSIteratorResult> p_o, compiler::TNode<Oddball> p_v);
compiler::TNode<Object> LoadJSRegExpResultIndex_1016(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultIndex_1017(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultInput_1018(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultInput_1019(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpResultGroups_1020(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o);
void StoreJSRegExpResultGroups_1021(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpResult> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadJSRegExpStringIteratorIteratingRegExp_1022(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratingRegExp_1023(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Object> p_v);
compiler::TNode<String> LoadJSRegExpStringIteratorIteratedString_1024(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorIteratedString_1025(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<String> p_v);
compiler::TNode<Smi> LoadJSRegExpStringIteratorFlags_1026(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o);
void StoreJSRegExpStringIteratorFlags_1027(compiler::CodeAssemblerState* state_, compiler::TNode<JSRegExpStringIterator> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetStartOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_GetEndOfCapture(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this, int31_t p_captureIndex);
compiler::TNode<Smi> _method_RegExpMatchInfo_NumberOfCaptures(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<RegExpMatchInfo> p_this);
compiler::TNode<Object> LoadAccessorInfoName_1028(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoName_1029(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Smi> LoadAccessorInfoFlags_1030(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoFlags_1031(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Object> LoadAccessorInfoExpectedReceiverType_1032(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoExpectedReceiverType_1033(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoSetter_1034(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoSetter_1035(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoGetter_1036(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoGetter_1037(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoJsGetter_1038(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoJsGetter_1039(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorInfoData_1040(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o);
void StoreAccessorInfoData_1041(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorInfo> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairGetter_1042(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairGetter_1043(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<Object> LoadAccessorPairSetter_1044(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o);
void StoreAccessorPairSetter_1045(compiler::CodeAssemblerState* state_, compiler::TNode<AccessorPair> p_o, compiler::TNode<Object> p_v);
compiler::TNode<SharedFunctionInfo> LoadDebugInfoSharedFunctionInfo_1046(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoSharedFunctionInfo_1047(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Smi> LoadDebugInfoDebuggerHints_1048(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebuggerHints_1049(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoScript_1050(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoScript_1051(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoOriginalBytecodeArray_1052(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoOriginalBytecodeArray_1053(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadDebugInfoDebugBytecodeArray_1054(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoDebugBytecodeArray_1055(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadDebugInfoBreakPoints_1056(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoBreakPoints_1057(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadDebugInfoFlags_1058(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoFlags_1059(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadDebugInfoCoverageInfo_1060(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o);
void StoreDebugInfoCoverageInfo_1061(compiler::CodeAssemblerState* state_, compiler::TNode<DebugInfo> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<SharedFunctionInfo> LoadFeedbackVectorSharedFunctionInfo_1062(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorSharedFunctionInfo_1063(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<SharedFunctionInfo> p_v);
compiler::TNode<Object> LoadFeedbackVectorOptimizedCodeWeakOrSmi_1064(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorOptimizedCodeWeakOrSmi_1065(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadFeedbackVectorClosureFeedbackCellArray_1066(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorClosureFeedbackCellArray_1067(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorLength_1068(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorLength_1069(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorInvocationCount_1070(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorInvocationCount_1071(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Int32T> LoadFeedbackVectorProfilerTicks_1072(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorProfilerTicks_1073(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Uint32T> LoadFeedbackVectorPadding_1074(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o);
void StoreFeedbackVectorPadding_1075(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackVector> p_o, compiler::TNode<Uint32T> p_v);
compiler::TNode<HeapObject> LoadFeedbackCellValue_1076(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellValue_1077(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Int32T> LoadFeedbackCellInterruptBudget_1078(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o);
void StoreFeedbackCellInterruptBudget_1079(compiler::CodeAssemblerState* state_, compiler::TNode<FeedbackCell> p_o, compiler::TNode<Int32T> p_v);
compiler::TNode<Struct> LoadAllocationMementoAllocationSite_1080(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o);
void StoreAllocationMementoAllocationSite_1081(compiler::CodeAssemblerState* state_, compiler::TNode<AllocationMemento> p_o, compiler::TNode<Struct> p_v);
compiler::TNode<Foreign> LoadWasmModuleObjectNativeModule_1082(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectNativeModule_1083(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadWasmModuleObjectExportWrappers_1084(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectExportWrappers_1085(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Script> LoadWasmModuleObjectScript_1086(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectScript_1087(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<Script> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectWeakInstanceList_1088(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectWeakInstanceList_1089(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectAsmJsOffsetTable_1090(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectAsmJsOffsetTable_1091(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<HeapObject> LoadWasmModuleObjectBreakPointInfos_1092(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o);
void StoreWasmModuleObjectBreakPointInfos_1093(compiler::CodeAssemblerState* state_, compiler::TNode<WasmModuleObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectEntries_1094(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectEntries_1095(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Object> LoadWasmTableObjectMaximumLength_1096(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectMaximumLength_1097(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Object> p_v);
compiler::TNode<FixedArray> LoadWasmTableObjectDispatchTables_1098(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectDispatchTables_1099(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadWasmTableObjectRawType_1100(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o);
void StoreWasmTableObjectRawType_1101(compiler::CodeAssemblerState* state_, compiler::TNode<WasmTableObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<JSArrayBuffer> LoadWasmMemoryObjectArrayBuffer_1102(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectArrayBuffer_1103(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<Smi> LoadWasmMemoryObjectMaximumPages_1104(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectMaximumPages_1105(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<HeapObject> LoadWasmMemoryObjectInstances_1106(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o);
void StoreWasmMemoryObjectInstances_1107(compiler::CodeAssemblerState* state_, compiler::TNode<WasmMemoryObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<JSArrayBuffer> LoadWasmGlobalObjectUntaggedBuffer_1108(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectUntaggedBuffer_1109(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<JSArrayBuffer> p_v);
compiler::TNode<FixedArray> LoadWasmGlobalObjectTaggedBuffer_1110(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectTaggedBuffer_1111(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectOffset_1112(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectOffset_1113(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<Smi> LoadWasmGlobalObjectFlags_1114(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o);
void StoreWasmGlobalObjectFlags_1115(compiler::CodeAssemblerState* state_, compiler::TNode<WasmGlobalObject> p_o, compiler::TNode<Smi> p_v);
compiler::TNode<ByteArray> LoadWasmExceptionObjectSerializedSignature_1116(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectSerializedSignature_1117(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapObject> LoadWasmExceptionObjectExceptionTag_1118(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o);
void StoreWasmExceptionObjectExceptionTag_1119(compiler::CodeAssemblerState* state_, compiler::TNode<WasmExceptionObject> p_o, compiler::TNode<HeapObject> p_v);
compiler::TNode<Foreign> LoadAsmWasmDataManagedNativeModule_1120(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataManagedNativeModule_1121(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<Foreign> p_v);
compiler::TNode<FixedArray> LoadAsmWasmDataExportWrappers_1122(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataExportWrappers_1123(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<FixedArray> p_v);
compiler::TNode<ByteArray> LoadAsmWasmDataAsmJsOffsetTable_1124(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataAsmJsOffsetTable_1125(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<ByteArray> p_v);
compiler::TNode<HeapNumber> LoadAsmWasmDataUsesBitset_1126(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o);
void StoreAsmWasmDataUsesBitset_1127(compiler::CodeAssemblerState* state_, compiler::TNode<AsmWasmData> p_o, compiler::TNode<HeapNumber> p_v);
compiler::TNode<JSReceiver> Cast10JSReceiver_1170(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast39UT15JSBoundFunction10JSFunction7JSProxy_1171(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Smi> Convert5ATSmi17ATconstexpr_int31_1172(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<JSArray> UnsafeCast7JSArray_1173(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<NumberDictionary> UnsafeCast18ATNumberDictionary_1174(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<FixedArray> UnsafeCast10FixedArray_1175(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Smi> UnsafeCast5ATSmi_1176(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<FixedDoubleArray> UnsafeCast16FixedDoubleArray_1177(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSTypedArray> UnsafeCast12JSTypedArray_1178(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<String> Cast6String_1179(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> UnsafeCast10HeapObject_1182(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSArray> Cast13ATFastJSArray_1188(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSReceiver> Cast13ATConstructor_1189(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<FixedArray> Cast10FixedArray_1193(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Context> UnsafeCast7Context_1194(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSArray> Cast20ATFastJSArrayForCopy_1195(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArgumentsObjectWithLength> Cast27JSArgumentsObjectWithLength_1196(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArray> Cast7JSArray_1199(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<HeapObject> Cast10HeapObject_1202(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Uint32T> Convert8ATuint327ATuint8_1203(compiler::CodeAssemblerState* state_, compiler::TNode<Uint8T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint16_1204(compiler::CodeAssemblerState* state_, compiler::TNode<Uint16T> p_i);
compiler::TNode<Uint32T> Convert8ATuint328ATuint31_1205(compiler::CodeAssemblerState* state_, compiler::TNode<Uint32T> p_i);
compiler::TNode<JSFunction> UnsafeCast10JSFunction_1206(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast13ATConstructor_1207(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<Map> UnsafeCast3Map_1208(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast39UT15JSBoundFunction10JSFunction7JSProxy_1209(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is13ATFastJSArray20UT5ATSmi10HeapObject_1210(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
void BranchIf13ATFastJSArray20UT5ATSmi10HeapObject_1211(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf20ATFastJSArrayForRead20UT5ATSmi10HeapObject_1212(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIfNot13ATFastJSArray20UT5ATSmi10HeapObject_1213(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf20ATFastJSArrayForCopy20UT5ATSmi10HeapObject_1214(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<BoolT> Is34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1215(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<BoolT> Is41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1216(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSReceiver> UnsafeCast10JSReceiver_1217(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSValue> UnsafeCast7JSValue_1218(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSDataView> Cast10JSDataView_1219(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Context> Cast7Context_1220(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Object> UnsafeCast23UT11ATFrameType7Context_1221(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<FixedArray> UnsafeCast14ATCoverageInfo_1222(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSArray> Cast34ATFastJSArrayWithNoCustomIteration_1223(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<BoolT> Is10JSReceiver20UT5ATSmi10HeapObject_1224(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSProxy> UnsafeCast7JSProxy_1225(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<IntPtrT> Convert8ATintptr8ATintptr_1226(compiler::CodeAssemblerState* state_, compiler::TNode<IntPtrT> p_i);
compiler::TNode<JSStringIterator> Cast16JSStringIterator_1227(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<JSArrayBuffer> Cast13JSArrayBuffer_1228(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<IntPtrT> Convert8ATintptr17ATconstexpr_int31_1231(compiler::CodeAssemblerState* state_, int31_t p_i);
compiler::TNode<JSObject> UnsafeCast8JSObject_1237(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<HeapNumber> UnsafeCast10HeapNumber_1238(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<HeapObject> Cast52UT11ATUndefined15JSBoundFunction10JSFunction7JSProxy_1239(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
compiler::TNode<Number> UnsafeCast20UT5ATSmi10HeapNumber_1246(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o);
compiler::TNode<JSArray> Cast20ATFastJSArrayForRead_1247(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
void BranchIf34ATFastJSArrayWithNoCustomIteration20UT5ATSmi10HeapObject_1248(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf41ATFastJSArrayForReadWithNoCustomIteration20UT5ATSmi10HeapObject_1249(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
void BranchIf10JSReceiver20UT5ATSmi10HeapObject_1250(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_True, compiler::CodeAssemblerLabel* label_False);
compiler::TNode<JSArray> Cast41ATFastJSArrayForReadWithNoCustomIteration_1251(compiler::CodeAssemblerState* state_, compiler::TNode<Context> p_context, compiler::TNode<Object> p_o, compiler::CodeAssemblerLabel* label_CastError);
}  // namespace internal
}  // namespace v8

#endif  // V8_GEN_TORQUE_GENERATED_BASE_NAMESPACE_V8_H_
